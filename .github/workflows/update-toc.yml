name: "Version Bump, TOC Update, Clean Branches"

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Enables manual triggering with custom inputs
    inputs:
      bump_type:
        description: "Version bump type"
        required: false
        default: "hotfix"
        type: choice
        options:
          - major
          - minor
          - hotfix

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies (adjust as needed)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      # Step 1: Determine next version
      - name: Determine next version
        id: bump_version
        run: |
          git fetch origin
          git checkout main
          git merge origin/main

          CURRENT_VERSION="$(cat .version)"
          IFS='.' read -r MAJOR MINOR HOTFIX <<< "$CURRENT_VERSION"

          # Determine bump type: defaults to 'hotfix' if not specified
          BUMP_TYPE="${{ github.event.inputs.bump_type || 'hotfix' }}"

          case "$BUMP_TYPE" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              HOTFIX=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              HOTFIX=0
              ;;
            hotfix)
              HOTFIX=$((HOTFIX + 1))
              ;;
            *)
              echo "Invalid bump type: $BUMP_TYPE"
              exit 1
              ;;
          esac

          NEW_VERSION="${MAJOR}.${MINOR}.${HOTFIX}"
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "Version bumped to: $NEW_VERSION"

      # Step 2: Create or switch to version branch (vX.Y.Z)
      - name: Create or switch to version branch
        id: create_branch
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          NEW_BRANCH="v${NEW_VERSION}"

          if [ "$(git ls-remote --heads origin $NEW_BRANCH | wc -l)" -eq 1 ]; then
            git checkout $NEW_BRANCH
            git pull --rebase origin $NEW_BRANCH
          else
            git checkout main
            git merge origin/main
            git checkout -b "$NEW_BRANCH"
          fi

          echo "new_branch=$NEW_BRANCH" >> $GITHUB_OUTPUT

      # Step 3: Update version file and generate TOC
      - name: Update version file and generate TOC
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          echo "$NEW_VERSION" > .version
          python scripts/generate_TOC.py

      # Step 4: Commit & push changes to vX.Y.Z
      - name: Commit and push to version branch
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          git add .version docs/index.md
          git commit -m "Auto-update: Bump version to ${{ steps.bump_version.outputs.new_version }}" || echo "No changes to commit."
          git push origin HEAD

      # Step 5: Merge vX.Y.Z back to main [skip ci]
      - name: Merge version branch back to main [skip ci]
        run: |
          NEW_BRANCH="${{ steps.create_branch.outputs.new_branch }}"
          git checkout main
          git pull origin main
          git merge --no-ff --no-edit "$NEW_BRANCH"
          git commit --allow-empty -m "Merging branch $NEW_BRANCH into main [skip ci]" || echo "No changes to commit."
          git push origin main

      # ðŸš€ Step 6: Update 'latest' Branch for Read the Docs
      - name: Update 'latest' Branch
        run: |
          git checkout "${{ steps.create_branch.outputs.new_branch }}"
          git branch -f latest
          git push origin latest --force

      # ðŸ§¹ Step 7: Auto-Clean Old Version Branches
      - name: Cleanup Old Version Branches
        run: |
          git fetch --all

          BRANCHES_TO_DELETE=$(git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/remotes/origin/v* | sed 's|origin/||' | tail -n +6)

          PROTECTED_BRANCHES=("main" "latest")

          for BRANCH in $BRANCHES_TO_DELETE; do
            if [[ ! " ${PROTECTED_BRANCHES[@]} " =~ " ${BRANCH} " ]]; then
              echo "Deleting old branch: $BRANCH"
              git push origin --delete "$BRANCH" || echo "Failed to delete $BRANCH"
            fi
          done
