name: "Update TOC & Bump Version"

on:
  push:
    branches:
      - main   # or whichever branch you want to trigger on

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Check out repository (with credentials so we can push)
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      # 2. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      # 3. Install dependencies (adjust for your project)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      # 4. Run your script to generate the TOC
      - name: Generate Table of Contents
        run: |
          python scripts/generate_TOC.py

      # 5. Bump version (in .version) and figure out new branch name
      - name: Bump version
        id: bump_version
        run: |
          CURRENT_VERSION="$(cat .version)"
          MAJOR="${CURRENT_VERSION%%.*}"
          MINOR="${CURRENT_VERSION##*.}"

          if [ "$MINOR" -lt 10 ]; then
            MINOR=$((MINOR + 1))
          else
            MINOR=1
            MAJOR=$((MAJOR + 1))
          fi

          NEW_VERSION="${MAJOR}.${MINOR}"
          echo "${NEW_VERSION}" > .version
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT

      # 6. Create or switch to the new branch (rebase if it already exists)
      - name: Create or switch to new branch
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          NEW_BRANCH="v${NEW_VERSION}"

          # Make sure we're up to date with 'origin/main'
          git fetch origin
          git checkout main
          git merge origin/main

          # Check if remote branch already exists
          if [ "$(git ls-remote --heads origin $NEW_BRANCH | wc -l)" -eq 1 ]; then
            echo "Branch '$NEW_BRANCH' exists on remote. Checking out and rebasing..."
            git checkout $NEW_BRANCH
            git pull --rebase origin $NEW_BRANCH
          else
            echo "Branch '$NEW_BRANCH' does NOT exist. Creating it from 'main'..."
            git checkout -b "$NEW_BRANCH"
          fi

      # 7. Commit & push changes
      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Stage updated files
          git add .version docs/index.md

          # Commit only if there are changes
          git commit -m "Auto-update TOC and bump version" || echo "No changes to commit."

          # Push to the new/current branch (no force push)
          git push origin HEAD
