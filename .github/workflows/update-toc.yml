name: "Update TOC & Bump Version"

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies (adjust as needed)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      # Step 1: Determine next version (without editing .version yet)
      - name: Determine next version
        id: bump_version
        run: |
          # Ensure main is up-to-date
          git fetch origin
          git checkout main
          git merge origin/main

          CURRENT_VERSION="$(cat .version)"
          MAJOR="${CURRENT_VERSION%%.*}"
          MINOR="${CURRENT_VERSION##*.}"

          # Bump logic: if MINOR < 10 then +1, else reset to 1 and MAJOR++
          if [ "$MINOR" -lt 10 ]; then
            MINOR=$((MINOR + 1))
          else
            MINOR=1
            MAJOR=$((MAJOR + 1))
          fi

          NEW_VERSION="${MAJOR}.${MINOR}"
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT

      # Step 2: Create or switch to new branch (vX.Y)
      - name: Create or switch to version branch
        id: create_branch
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          NEW_BRANCH="v${NEW_VERSION}"

          # Check if branch exists on remote
          if [ "$(git ls-remote --heads origin $NEW_BRANCH | wc -l)" -eq 1 ]; then
            echo "Branch '$NEW_BRANCH' exists. Checking out & rebasing..."
            git checkout $NEW_BRANCH
            git pull --rebase origin $NEW_BRANCH
          else
            echo "Branch '$NEW_BRANCH' does NOT exist. Creating from main..."
            # Make sure main is up to date
            git checkout main
            git merge origin/main
            git checkout -b "$NEW_BRANCH"
          fi

          echo "new_branch=$NEW_BRANCH" >> $GITHUB_OUTPUT

      # Step 3: Now on vX.Y branch, update .version & run TOC script
      - name: Update version file and generate TOC
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          echo "$NEW_VERSION" > .version
          python scripts/generate_TOC.py

      # Step 4: Commit & push changes to vX.Y
      - name: Commit and push to version branch
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          git add .version docs/index.md
          git commit -m "Auto-update: Bump version to ${{ steps.bump_version.outputs.new_version }}" || echo "No changes to commit."
          git push origin HEAD

      # Step 5: (Optional) Merge vX.Y back into main so .version is up to date there
      - name: Merge version branch back to main [skip ci]
        run: |
          NEW_BRANCH="${{ steps.create_branch.outputs.new_branch }}"
          git checkout main
          git pull origin main

          # Merge the version branch into main
          git merge --no-ff --no-edit "$NEW_BRANCH"

          # Commit message contains [skip ci] to avoid retriggering
          git commit --allow-empty -m "Merging branch $NEW_BRANCH into main [skip ci]" || echo "No changes to commit."
          git push origin main
